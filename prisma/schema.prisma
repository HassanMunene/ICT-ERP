// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Shared Enums
enum UserStatus { 
  ACTIVE
 INACTIVE 
 SUSPENDED 
 }
 
enum LeaveStatus { 
  PENDING 
  APPROVED 
  REJECTED 
  }
enum AttendanceStatus { 
  PRESENT 
  ABSENT 
  LATE 
  REMOTE 
  HOLIDAY 
  }

enum RoleScope { 
  SYSTEM 
  MODULE 
  }

  enum ProjectStatus {
     PLANNED 
     ACTIVE 
     ON_HOLD 
     COMPLETED 
     CANCELLED 
     }

enum TaskStatus { 
  TODO 
  IN_PROGRESS 
  BLOCKED 
  DONE 
  }

// ------------------------------------------------------
// 1) Authentication & Authorization
// ------------------------------------------------------
model User{
  id String  @id @default(cuid())
  email String @unique
  passwordHash   String
  firstName      String
  lastName       String
  status         UserStatus  @default(ACTIVE)
  userRoles      UserRole[]
  departmentId   String?     
  department     Department? @relation(fields: [departmentId], references: [id])
  // profiles
  employee       Employee?
  contractor     Contractor?
  marketer       Marketer?
  attendance     Attendance[]
  leaveRequests  LeaveRequest[]
  approvedLeaves LeaveRequest[] @relation("LeaveApprover")
  timeLogs       Timelog[]

  //contacts       Contact[]        @relation("ContactOwner")


  // RBAC
  // cross-module ownership/assigned-to
  /*tasks          Task[]           @relation("TaskAssignees")
  timeLogs       Timelog[]
  payouts        Payout[]
  opportunities  Opportunity[]    @relation("OpportunityOwner")
  leads          Lead[]           @relation("LeadOwner")
  companies      Company[]        @relation("CompanyAccountMgr")
  comms          CommunicationLog[] @relation("CommAuthor")
  // docs & notifications
  notifications  Notification[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  @@index([departmentId])*/
}
model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  scope       RoleScope  @default(MODULE)
  // e.g., permissions per module kept as many-to-many via RolePermission
  rolePermissions RolePermission[]
  userRoles   UserRole[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}


model Permission {
  id          String   @id @default(cuid())
  code        String   @unique // e.g., "PROJECT.READ", "FINANCE.POST_JOURNAL"
  description String?
  rolePermissions RolePermission[]
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  @@id([roleId, permissionId])
}
model UserRole {
  userId String
  roleId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  @@id([userId, roleId])
}

// ------------------------------------------------------
// 2) Personnel Management (HR)
// ------------------------------------------------------

model Department {
  id        String  @id @default(cuid())
  name      String  @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id        String @id @default(cuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  position  String?
  hireDate  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contractor {
  id              String @id @default(cuid())
  userId          String @unique
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  contractNumber  String?
  contractDetails String?
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Marketer {
  id             String @id @default(cuid())
  userId         String @unique
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Attendance {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  date      DateTime
  status    AttendanceStatus @default(PRESENT)
  notes     String?
  createdAt DateTime @default(now())
  @@unique([userId, date])
  @@index([date])
}

model LeaveRequest {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate   DateTime
  endDate     DateTime
  reason      String?
  status      LeaveStatus @default(PENDING)
  approverId  String?
  approver    User?       @relation("LeaveApprover", fields: [approverId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  @@index([userId, startDate, endDate])
}

// ------------------------------------------------------
// 3) Project & Service Delivery
// ------------------------------------------------------

model Client {
  id          String     @id @default(cuid())
  name        String
  email       String?
  phone       String?
  website     String?
  address     String?
  //contacts    Contact[]  // from CRM (shared)
  projects    Project[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  @@index([name])
}

model Project {
  id            String        @id @default(cuid())
  clientId      String
  client        Client        @relation(fields: [clientId], references: [id], onDelete: Restrict)
  name          String
  description   String?
  status        ProjectStatus @default(PLANNED)
  budget        Decimal?      @db.Decimal(18,2)
  startDate     DateTime?
  endDate       DateTime?
  phases        ProjectPhase[]
  tasks         Task[]
  deliverables  Deliverable[]
  //invoices      Invoice[]
  //expenses      Expense[]     // allocated expenses
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
 //npx  @@index([clientId, status])
}

model ProjectPhase {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name        String
  order       Int
  startDate   DateTime?
  endDate     DateTime?
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([projectId, order])
}

model Task {
  id           String      @id @default(cuid())
  projectId    String
  project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  phaseId      String?
  phase        ProjectPhase? @relation(fields: [phaseId], references: [id], onDelete: SetNull)
  title        String
  description  String?
  status       TaskStatus    @default(TODO)
  timelogs     Timelog[]
  deliverables Deliverable[]

  //priority     Priority      @default(MEDIUM)
  dueDate      DateTime?
  // Many-to-many assignees
  //assignees    User[]        @relation("TaskAssignees")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  @@index([projectId, phaseId, status, dueDate])
}

model Timelog {
  id         String   @id @default(cuid())
  taskId     String
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startTime  DateTime
  endTime    DateTime
  notes      String?
  createdAt  DateTime  @default(now())
  @@index([taskId, userId, startTime])
}

model Deliverable {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskId      String?
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)
  title       String
  description String?
  // Link to Document service
  documentId  String?
  //document    Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
  dueDate     DateTime?
  submittedAt DateTime?
  approvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([projectId, taskId])
}
