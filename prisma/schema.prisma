// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Shared Enums
enum UserStatus { 
  ACTIVE
 INACTIVE 
 SUSPENDED 
 }
 
enum LeaveStatus { 
  PENDING 
  APPROVED 
  REJECTED 
  }
enum AttendanceStatus { 
  PRESENT 
  ABSENT 
  LATE 
  REMOTE 
  HOLIDAY 
  }

enum RoleScope { 
  SYSTEM 
  MODULE 
  }

// ------------------------------------------------------
// 1) Authentication & Authorization
// ------------------------------------------------------
model User{
  id String  @id @default(cuid())
  email String @unique
  passwordHash   String
  firstName      String
  lastName       String
  status         UserStatus  @default(ACTIVE)
  userRoles      UserRole[]
  departmentId   String?     
  department     Department? @relation(fields: [departmentId], references: [id])
  // profiles
  employee       Employee?
  contractor     Contractor?
  marketer       Marketer?
  // RBAC
  // cross-module ownership/assigned-to
  /*tasks          Task[]           @relation("TaskAssignees")
  timeLogs       Timelog[]
  attendance     Attendance[]
  leaveRequests  LeaveRequest[]
  payouts        Payout[]
  opportunities  Opportunity[]    @relation("OpportunityOwner")
  leads          Lead[]           @relation("LeadOwner")
  contacts       Contact[]        @relation("ContactOwner")
  companies      Company[]        @relation("CompanyAccountMgr")
  comms          CommunicationLog[] @relation("CommAuthor")
  // docs & notifications
  notifications  Notification[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  @@index([departmentId])*/
}
model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  scope       RoleScope  @default(MODULE)
  // e.g., permissions per module kept as many-to-many via RolePermission
  rolePermissions RolePermission[]
  userRoles   UserRole[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}


model Permission {
  id          String   @id @default(cuid())
  code        String   @unique // e.g., "PROJECT.READ", "FINANCE.POST_JOURNAL"
  description String?
  rolePermissions RolePermission[]
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  @@id([roleId, permissionId])
}
model UserRole {
  userId String
  roleId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  @@id([userId, roleId])
}

// ------------------------------------------------------
// 2) Personnel Management (HR)
// ------------------------------------------------------

model Department {
  id        String  @id @default(cuid())
  name      String  @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id        String @id @default(cuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  position  String?
  hireDate  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contractor {
  id              String @id @default(cuid())
  userId          String @unique
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  contractNumber  String?
  contractDetails String?
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Marketer {
  id             String @id @default(cuid())
  userId         String @unique
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
